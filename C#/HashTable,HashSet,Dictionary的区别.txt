1.HashTable 

HashTable表示键值对(key-value)集合，其中key通常可以用来快速查找，同时key区分大小写，value用于存储对应于key的值，Hashtable中的key-value键值均为object类型，所以hashtable可以支持任何类型的key-value键值对，任何非null对象都能用作键值对！


在哈希表中添加一个key/键值对：HashtableObject.Add(key,value);　

在哈希表中去除某个key/键值对：HashtableObject.Remove(key);

从哈希表中移除所有元素： HashtableObject.Clear();

判断哈希表是否包含特定键key： HashtableObject.Contains(key);



2.HashSet
HashSet<T>类主要是设计用来做高性能运算的，例如对两个集合求交集，并集，差集等。集合中包含一组不重复且无顺序的元素，HashSet接受重复对象！

HashSet<T>的一些特性如下:

a. HashSet<T>中的值不能重复且没有顺序。
b. HashSet<T>的容量会按需自动添加。
c. 不能通过下标访问


3.Dictionary

Dictionary表示键和值的集合。
Dictionary<string, string>是一个泛型

他的特点是存入对象是需要与[key]值一一对应的存入该泛型，通过某一个一定的[key]去找到对应的值


4.HashTable和Dictionary
(1)HashTable不支持泛型，而Dictionary支持泛型
(2)HashTable的元素属于Object类型，所以在存储或检索值类型时通常发生装箱和拆箱操作，所以你可能需要进行一些类型转换的操作，非常耗时！
(3)单线程程序中推荐使用Dictionay,有泛型优势，且读取速度较快，容量利用更充分，多线程程序中推荐使用HashTable,默认的HashTable允许单线程写入，多线程读取，对HashTable进一步调用Sync()方法可以获得完全线程安全的类型，而Dictionary非线程安全，必须人为lock语句进行保护，效率大减！




