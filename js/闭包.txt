function a(){
var i=0;
function b(){
alert(++i);
}
return b;
}
var c = a();
c();

这段代码有两个特点：
1、函数b嵌套在函数a内部；
2、函数a返回函数b。

这样在执行完var c=a()后，变量c实际上是指向了函数b，再执行c()后就会弹出一个窗口显示i的值(第一次为1)。
当函数a的内部函数b被函数a外的一个变量引用的时候，就创建了一个闭包。


1.函数嵌套函数


2.函数内部可以引用外部的参数和变量


3.参数和变量不会被垃圾回收机制回收


缺点：占用内存，容易造成内存泄漏


var name = "The Window";
    var object = {
        name: "My Object",
        getNameFunc:function() {
            return function () {
                return this.name;
            }
        }
    }

alert(object.getNameFunc()());  //The Window
//object.getNameFunc()()
this关键字在执行的时候才能确定是谁。所以this永远指向调用者，即对‘调用对象‘者的引用。
object.getNameFunc()调用返回一个函数。这是个返回的函数，它不在是object的属性或者方法，此时调用者是window。因此输出是 The Window


var name = "The Window";
    var object = {
        name: "My Object",
        getNameFunc:function() {
            var that=this;
            return function () {
                return that.name;
            }
        }
    }

alert(object.getNameFunc()());  //My Object"
////object.getNameFunc()()
this关键字在执行的时候才能确定是谁。所以this永远指向调用者，即对‘调用对象‘者的引用。
方法声明时，此时的this值得是object,将this赋值给that，that.name 自然就是调用object对象的name属性


事例2：
 var array = [];

            function Nico()
            {
                for(var i=0;i<10;i++)
                {
                    var nico = (function () {
                        return i;
                    });
                   
                    array.push(nico);
                }
            }

            Nico();

            for(var i=0;i<10;i++)
            {
                console.log(array[i]());
            }


输出:循环输出10次10
分析: 因为嵌套函数并没有被立即执行，所以循环10次之后只是保存10个这样的函数 function(){ return i; }，调用Nico函数把这10个 函数保存在数组中，在最后循环数组输出的时候再返回 i 值，但是那时候for循环已经结束了，i 为10，所以执行结果便是弹出10个10；


循环数组输出的时候，Noic内部的for循环已经结束了，i=10，所以执行结果return 10




 var array = [];

            function Nico()
            {
                for(var i=0;i<10;i++)
                {
                    var nico = (function () {
                        return i;
                    })(); //
                   
                    array.push(nico);
                }
            }

            Nico();

            for(var i=0;i<10;i++)
            {
                console.log(array[i]);
            }

输出:循环输出10次10
分析:每一次循环，匿名函数都会被立即执行，并把对应的i作为返回值存在nico变量中，并放入数组中
数组中存着10个函数的返回值而不是函数
