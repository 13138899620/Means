1.mvc中使用async和await可以让系统开新线程处理Task的代码，同时不必等Task执行结束，就可以同时运行Task之后的代码，加快效率。


2.什么场景下需要异步操作？
在因为磁盘io或网络io而导致的任务执行时间长的时候应该使用异步操作，如果任务执行时间长是因为cpu的消耗则应使用同步操（此时异步操作不会改善任何问题）


3.异步操作时：
1、一个请求过来，特定线程池出一个线程处理此请求
2、启动一个非特定线程池中的另一个线程处理异步操作，此时处理此请求的线程就会空出来，不会被阻塞，它可以继续处理其它请求
3、异步操作执行完毕后，从特定线程池中随便找一个空闲线程返回请求结果

4.实际工作中，async和await我们可以用于类似用户上传头像、上传照片这种的耗时较长的功能中，我们可以在边上传照片时边处理数据库的其他事务。

而纯异步则多用于时间较长，而无需结果实时看反馈给用户的操作，例如：管理在后台备份数据库、清理垃圾文件等。


5.async的作用是异步执行，await的作用是等待执行结果（会卡住异步方法中await以下的代码，但不会卡死主线程）。

6.async用于异步，可以优美的替代Thread、BackgroundWorker和Task.Run等写法。
　　await用于等待。一定是在你主动希望阻塞并等待返回结果时才使用。
　　在async方法里，Task在创建时就开始运行了。